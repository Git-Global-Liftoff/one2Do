@model one2Do.ViewModels.ToDoListViewModel




<h2>ToDo Lists</h2>

<form asp-action="Index" method="get">
    <div class="form-group">
        <label asp-for="SelectedCategoryId">Filter by Category</label>
        <select asp-for="SelectedCategoryId" asp-items="Model.Categories" class="form-control">
            <option value="">-- All Categories --</option>
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Filter</button>
</form>

@* <table class="table">
    <thead>
        <tr>
            <th>Title</th>
            <th>Category</th>
            <th>Due Date</th>
            <th>Completed Tasks</th>
            <th>Total Tasks</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.ToDoItems)
        {
            <tr>
                <td>@item.Title</td>
                <td>@item.CategoryName</td>
                @* <td>@item.DueDate.ToShortDateString()</td> *@
                @* <td>@item.CompletedTasks</td>
                <td>@item.TotalTasks</td>
            </tr>
        }
    </tbody>
</table> *@ 
   
@foreach (var list in Model.ToDoItems)
{
    <div class="card mb-4">
        <div class="card-header">
            
            <h3>@list.Title</h3>
            <p>Category: @list.CategoryName</p>
            <p class="progress-tacker">@list.CompletedTasks of @list.TotalTasks tasks completed!</p>
        </div>
        <div class="card-body">
            <table class="table">
                <thead>
                    <tr>
                        <th>Task Description</th>
                        <th>Due Date</th>
                        <th>Completed</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var task in list.TaskItems)
                {
                    <tr>
                        <td>@task.TaskDescription</td>
                        <td>@(task.DueDate.HasValue ? task.DueDate.Value.ToShortDateString() : "No Due Date")</td>
                        <td>@task.IsCompleted</td>
                    </tr>
                }
                </tbody>
            </table>
            <form method="get" asp-controller="TaskItem" asp-action="Create">
                <input type="hidden" name="toDoListId" value="@list.ToDoListId" />
                <button type="submit" class="btn btn-info">Add Task</button>
            </form>
            <br>
            
        </div>
    </div>
    
}
<br>
<form method="get">
        <button asp-controller="User" asp-action ="Index" class="btn btn-info">Back to Profile</button>
    </form>
<br>
 <form method="get">
        <button asp-controller="ToDoList" asp-action="Create" class="btn btn-info">Create New List</button>
    </form>

@*THE FOLLOWING IS SUGGESTED FOR Updating the view to display a dropdown for categories and modify the routing so that each category selection routes to its own page:

@model one2Do.ViewModels.ToDoListViewModel

<h2>ToDo Lists</h2>

<form asp-controller="ToDoList" asp-action="Index" method="get">
    <div class="form-group">
        <label>Filter by Category:</label>
        <select name="category" class="form-control" onchange="this.form.submit()">
            <option value="">All</option>
            @foreach (var cat in Model.Categories)
            {
                <option value="@cat" @(Model.SelectedCategory == cat ? "selected" : "")>@cat</option>
            }
        </select>
    </div>
</form>

@foreach (var list in Model.ToDoItems)
{
    <div class="card mb-4">
        <div class="card-header">
            <h3>@list.Title</h3>
            <p>Category: @list.CategoryName</p>
            <p class="progress-tacker">@list.CompletedTasks of @list.TotalTasks tasks completed!</p>
        </div>
        <div class="card-body">
            <table class="table">
                <thead>
                    <tr>
                        <th>Task Description</th>
                        <th>Due Date</th>
                        <th>Completed</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var task in list.TaskItems)
                    {
                        <tr>
                            <td>@task.TaskDescription</td>
                            <td>@(task.DueDate.HasValue ? task.DueDate.Value.ToShortDateString() : "No Due Date")</td>
                            <td>@(task.IsCompleted ? "Yes" : "No")</td>
                        </tr>
                    }
                </tbody>
            </table>
            <form method="get" asp-controller="TaskItem" asp-action="Create">
                <input type="hidden" name="toDoListId" value="@list.ToDoListId" />
                <button type="submit" class="btn btn-info">Add Task</button>
            </form>
            <br>
        </div>
    </div>
}

<br>
<form method="get">
    <button asp-controller="User" asp-action="Index" class="btn btn-info">Back to Profile</button>
</form>
<br>
<form method="get">
    <button asp-controller="ToDoList" asp-action="Create" class="btn btn-info">Create New List</button>
</form>
*@